## Introduction



## Bitcrushing in History

Although I knew about bitcrushing, I didn't really take an interest in it until I heard the bassline in Deerhoof's ['Sexy But Sparkly'](https://youtu.be/YFJZTGxepWA?t=271).

## How Bitcrushing Works

### What is an Audio Sample?



### Bitcrushing an Audio Sample

We take the amplitude samples, divide them by some number, floor that result, and then multiply them back to the original amplitude.  This results in a reduction (rounding) to a nearest resolution value.



## Bitcrushing in a JavaScript Context


### The Audio Worklet

To achieve a bitcrushing effect, we need to dig a little deeper into the Web Audio API's custom Audio Node. custom processes the individual amplitude of audio samples, we will need to go a little deeper than you might normally be used to with Web Audio and build a custom Audio Node.



### The Bitcrushing Implimentation Logic 


## Specific Bitcrushing applications



References: 

+ https://developers.google.com/web/updates/2017/12/audio-worklet
+ https://www.w3.org/TR/webaudio/#audioworkletnode
