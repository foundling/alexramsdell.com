title: from python import confusion
---
author: alex
---
pub_date: 2025-03-26
---
last_updated: 2021-01-08
---
tags:
web audio
bit-crusher
---
references:
- David Beazley's talk, 'Live and Let Die', on Modules and Packages: https://www.youtube.com/watch?v=0oTh1CXRaQ0
- https://stackoverflow.com/questions/14132789/relative-imports-for-the-billionth-time/79209936#79209936
- Python 3 module tutorial: https://docs.python.org/3/tutorial/modules.html
---
toc_hidden: true
---
body:

[ Note: this article is about python3.3+ and does not talk about the differences between 2.7 and 3.3+ ]
 
At some point in your attempt to master Python, the `import` statement starts to cause trouble. In this article, I'm going to try to clarify how packages, modules and imports work together so you'll never have to play whack-a-mole again. I'll scaffold an 'import-naive' project structure, explain how python import resolution works, and then use our new-found understanding to fix it.

Here's the layout:

```
  app/
    app.py                                         
    module_a.py                               
    lib/
      util.py   # problem: can't run this directly                                      
      log.py
      format.py
    test/
      test_module_a.py                     
      test_util.py                         
```

And here it is again, annotated with the relevant import statements:


```
  app/
    app.py              # import module_a
    module_a.py         # from lib import util
    lib/
      util.py           # from . import log, format
      log.py
      format.py
    test/
      test_module_a.py  # import ..module_a
      test_util.py      # import ..lib.util
```

From inside your `app` directory you can run the app as a script with `python app.py`. This also works when you run the top-level submodule with `python module_a.py` as well as an import-free module in a subdirectory, such as `lib/log.py`. No problems so far.

But what if you have a file like `lib/util.py` that pulls in sibling files `log.py` and `format.py`. Unfortunately, running `python lib/util.py` as a script fails:

```
  Traceback (most recent call last):
    File "/path/to/app/lib/util.py", line 1, in <module>
      from . import log, format
      ^^^^^^^^^^^^^^^^^^^^^^^^^
  ImportError: attempted relative import with no known parent package
```

Hoping the solution is something simple, you might say to yourself: ah, my app needs to be a *package*.  I'll go and add `__init__.py` files to the `app/` and `lib/` because I've heard that will make an app into a package.

That's a good step to take. It means your app is now a regular package. But the truth is that in Python 3.3+, your app was by default already a package, just a namespace package.  But a package nonetheless!

We have this structure now:

```
  app/
    __init__.py
    app.py              # import module_a
    module_a.py         # from lib import util
    lib/
      __init__.py
      util.py           # from . import log, format
      log.py
      format.py
    test/
      __init__.py
      test_module_a.py  # import ..module_a
      test_util.py      # import ..lib.util
```

Better than it was before but it still fails when you run `python lib/util.py`.

Let's read the error more closely: 'attempted relative import with no known parent package'. What does 'no parent package' mean? Isn't `lib` a package?

To sort this out, we'll need dig into two features of the python module system:

- the module attribute, `__name__`, which tells us how our module was loaded
- the `sys.path` attribute, which tells us where python goes looking for modules referenced by the `import` statement


## What's in a `__name__` ?

Every module has a global `__name__` attribute whose value indicates how that module is being run. 

Let's demonstrate by adding an `lib/exp.py` file and putting `print(__name__)` at the top.

```
  # file: lib/exp.py
  print(__name__)
```

If we run it directly with `python lib/exp.py`, it prints `__main__`.

If we import it into our top-level `app.py` file and run `python app.py`, `lib/exp.py` prints something interesting: `lib.exp`. The value in this case tells us the full module path of `exp` relative to the root of the project. `__name__` tells us that `exp` is a submodule of the `lib` package.

If the direct invocation of `lib/util.py` drops the package heirarchy we need to successfully import `lib.util` from a subdirectory, what can we do about this?  

The answer is to use the python interpreter's `-m` flag, and pass in a module path as opposed to a file path.  But we haven't covered enough for that to make sense yet.  We need to talk about `sys.path` first.

## Module names resolve against `sys.path`

`sys.path` is a list of file paths that the python intrepreter assembles on startup. Python uses these paths to resolve modules from your `import` statements.  There is a ton of complexity to how `sys.path` is constructed [see beazley in references], but all we need to know to solve our import issue is how it determines the path at the head of `sys.path`.

Let's experiment again by printing `sys.path` at the top of our `lib/exp.py`.

```
# file: lib/exp.py
print(__name__)
print(sys.path)

```

If we run `python lib/exp.py` to execute the file as a script, its name is `__main__` and the first path in `sys.path` becomes the directory where the `__main__` file is located, `/full/path/to/app/lib`.

That means when it tries to resolve our imports, python will first look *inside of* `/full/path/to/app/lib`.

Recall our previous error: 'no known path to parent package'. Looking at `sys.path`, we can now see why python fails at `from . import log, format`: there are no packages named 'lib' in `/full/path/to/app/lib` ... because `/full/path/to/app/lib` *itself* is the package we're looking for.

Don't fret!  `python -m` treats the first `sys.path` a little differently. From `/full/path/to/app`, we can run `python -m lib.lib` and it will put the current working directory at the head of `sys.path`, which is `/full/path/to/app`. It will also load the module as `__main__`.

Since the `sys.path` now is one directory level up, the `lib` directory is visible as a package, so the module import resolves correctly.

## My Recommendation

Without knowing anything about your goals, consider doing any of the following:
- treat your entire app as a package and run it with `python -m` from the parent directory of `app/`.  Instead of running your app and your individual modules in two different ways, you can run them all in the same way.  And if you want to run pytest on your `app/test` directory, you can run that in the same way, e.g. `python -m pytest -s test/test_*.py`.

To make it clear, I've adjusted the imports from the running example to their absolute format.

```
  # note: these imports require you to run the app via 'python -m app.app' from 
  # the directory that contains the root 'app' directory

  app/
    app.py              # import app.module_a
    module_a.py         # from app.lib import util
    lib/
      util.py           # from app.lib import log, format
      log.py
      format.py
    test/
      test_module_a.py  # import app.module_a
      test_util.py      # import app.lib.util
```

You might prefer to keep the relative imports, in which case, keep 'em!  At least now you have a mental model of how `import` works in conjunction with `sys.path`, and how to run your package/module as a script with `python -m`.
