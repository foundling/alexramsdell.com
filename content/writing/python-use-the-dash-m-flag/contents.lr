title: python -m
---
author: alex
---
pub_date: 2025-03-26
---
last_updated: 2021-01-08
---
tags:
web audio
bit-crusher
---
toc_hidden: true
---
body:

## `import` frustration: a rite of passage?

At some point in your Python journey, using `import` starts to cause pain.  You want to unit test but `pytest` can't find your test dependency modules.  You want to run a file as a script using an `if __name__ == '__main__'` block at the bottom, or debug a single file inside of your package, but get a `ModuleNotFound` error.  So you change the import method and that fixes it. Except, now you get a `ModuleNotFound` Error when you run the app as a package.  You're playing whack-a-mole with imports and growing confused and frustrated.  This is where it pays to stop and explore the finer points of imports, modules and the python package structure.

## What's in a  `__name__` ?

A module (aka a file) has a `__name__` attribute that unique identifies it's place in the currently running module hierarchy.  This attribute is set to `'__main__'` when it's  invoked directly by Python, which makes it the entrypoint.  If a module's `__name__` property is set to something like `'app.module_a.a'`, this indicates its unique position within the loaded package heirarchy.

Let's use a concrete example. Imagine your directory looks like this:

```
  app/
    __init__.py
    app.py
    module
      __init__.py
      mod.py
      submodule
        __init__.py
        submod.py
```

Let's say `app/module/submodule/submod.py` looks like this:

```
  # file: app/module/submodule/submod.py

  print(__name__)
```

If you run the module directly, e.g. `python app/module/submodule/submod.py`, it will print a `__name__` of `'__main__'` because its being treated as an entrypoint and not as a module in the context of a package.

However, if we import `module.submodule.submod` into `app.py` and run `python app.py` instead,  the code in `app/module/submodule/submod.py` will print `'module.submodule.submod'` as the value of `__name__`, indicating its location in the `app` package's module heirarchy. 

## The import resolution process

### first, the builtins
When python sees an import statement, it tries to resolve the target module name against a list of `builtin` modules first. If it can't resolve it there, it moves on to a list of directories found in `sys.path`. 

If you're curious, `sys.builtin_module_names` contains the list of `builtin` modules that Python will resolve against before anything else.  

Running ```python -c "import sys; print(sys.builtin_module_names)"``` from the terminal shows us the following:


```('_abc', '_ast', '_codecs', '_collections', '_functools', '_imp', '_io', '_locale', '_operator', '_signal', '_sre', '_stat', '_string', '_symtable', '_thread', '_tokenize', '_tracemalloc', '_typing', '_warnings', '_weakref', 'atexit', 'builtins', 'errno', 'faulthandler', 'gc', 'itertools', 'marshal', 'posix', 'pwd', 'sys', 'time')
```

If python can't resolve a given module against the `builtins`, it moves on to a list of module search paths assembled on start and bound to [`sys.path`](https://docs.python.org/3/library/sys_path_init.html).

### then, the `sys.path`

At runtime, python populates `sys.path` with a list of directory paths to look inside if it can't resolve a given module in the list of `builtin`s.  The first path in `sys.path` is especially important to the module resolution scheme: if you run the module as a script, e.g. `python script.py`, or as a module, e.g. `python -m script.py`, the first path in `sys.path` is the parent directory of the python file/module; If you run a command directly using the interpreter's `-c` flag, e.g. `python -c "script.py"`, the first path is `''`, indicating the current working directory.
